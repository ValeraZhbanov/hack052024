# -*- coding: cp1251 -*-


import pandas as pd
import datetime
import json
import queue
import decimal


import config

from dbstore import DbStore



def processing():
    Запрос = DbStore.execute_proc('sch.ЗапросыНаГенерациюРасписанияPop')

    if len(Запрос) <= 0:
        return

    Выполнено = False
    КодНовойВерсииПроектаРасписания = None

    try:
        КодПроекта = Запрос[0]['КодПроектаРасписания']

        Проект = DbStore.execute_select_query_one("""
        SELECT *
        FROM sch.ПроектыРасписания
        WHERE ПроектыРасписания.Код = %s
        """, [КодПроекта])

        ДатаНачала = Проект['ДатаНачала']
        ЧислоДнейПроекта = (Проект['ДатаОкончания'] - ДатаНачала).days + 1


        ДоктраПоДняПоТипамИсследований = DbStore.execute_select_query_all("""
        SELECT
	        ДоктораПоДнямПоТипам.ДатаПроекта::date,
	        json_agg(json_build_object('КодТипаИсследования', ДоктораПоДнямПоТипам.КодТипаИсследования,'Доктора', ДоктораПоДнямПоТипам.Доктора)) ДоктораПоТипамИсследований
        FROM (
	        SELECT 
		        ДатаПроекта, 
		        ТипыИсследований.Код КодТипаИсследования,
		        CASE WHEN MAX(ДоктораПоДнямПоТипам.КодДоктора) IS NOT NULL THEN json_agg(ДоктораПоДнямПоТипам.Объект ORDER BY ДоктораПоДнямПоТипам.Основная DESC) ELSE '[]'::json END Доктора
	        FROM sch.ПроектыРасписания
	        CROSS JOIN generate_series(ПроектыРасписания.ДатаНачала, ПроектыРасписания.ДатаОкончания, '1 day'::interval) ДатаПроекта
	        CROSS JOIN med.ТипыИсследований

	        LEFT JOIN (
		        SELECT
			        РабочиеСменыДокторов.Дата,
			        ТипыИсследований.Код КодТипаИсследования, 
			        Доктора.Код КодДоктора,
			        МодальностиДокторов.Основная,

			        json_build_object('Доктор', row_to_json(Доктора), 'ТипРабочейСмены', row_to_json(ТипыРабочихСмен)) Объект

		        FROM hr.Доктора
		        LEFT JOIN hr.МодальностиДокторов ON МодальностиДокторов.КодДоктора = Доктора.Код
		        LEFT JOIN med.Модальности ON Модальности.Код = МодальностиДокторов.КодМодальности
		        LEFT JOIN med.ТипыИсследований ON ТипыИсследований.КодМодальности = Модальности.Код
		        LEFT JOIN hr.РабочиеСменыДокторов ON РабочиеСменыДокторов.КодДоктора = Доктора.Код
		        LEFT JOIN hr.ТипыРабочихСмен ON ТипыРабочихСмен.Код = РабочиеСменыДокторов.КодТипаРабочейСмены
	        ) ДоктораПоДнямПоТипам ON ДоктораПоДнямПоТипам.Дата = ДатаПроекта
						            AND ДоктораПоДнямПоТипам.КодТипаИсследования = ТипыИсследований.Код

	        WHERE ПроектыРасписания.Код = %s
	        GROUP BY ДатаПроекта, ТипыИсследований.Код
        ) ДоктораПоДнямПоТипам
        GROUP BY ДоктораПоДнямПоТипам.ДатаПроекта
        """, [КодПроекта])


        ТипыИсследований = DbStore.execute_select_query_all("SELECT *, ROW_NUMBER() OVER (ORDER BY Код) - 1 Индекс FROM med.ТипыИсследований")

        СтатистикаОбращенийПоДнямПроекта = DbStore.execute_select_query_all("""
        SELECT
            ДатаПроекта::date,
            json_agg(COALESCE (
                СтатистикаОбращений1.Значение,
                СтатистикаОбращений2.Значение,
                (СтатистикаОбращений3.Значение / 7)::int,
                (СтатистикаОбращений4.Значение / 7)::int,
                0
            )::int) Значения

        FROM sch.ПроектыРасписания
        CROSS JOIN generate_series(ПроектыРасписания.ДатаНачала, ПроектыРасписания.ДатаОкончания, '1 day'::interval) ДатаПроекта

        CROSS JOIN med.ТипыИсследований

        LEFT JOIN nn.СтатистикаОбращений СтатистикаОбращений1 ON СтатистикаОбращений1.Дата = ДатаПроекта
                                                            AND СтатистикаОбращений1.КодТипа = 1
                                                            AND СтатистикаОбращений1.КодТипаИсследования = ТипыИсследований.Код

        LEFT JOIN nn.СтатистикаОбращений СтатистикаОбращений2 ON СтатистикаОбращений2.Дата = ДатаПроекта
                                                            AND СтатистикаОбращений2.КодТипа = 2
                                                            AND СтатистикаОбращений2.КодТипаИсследования = ТипыИсследований.Код

        LEFT JOIN nn.СтатистикаОбращений СтатистикаОбращений3 ON ДатаПроекта BETWEEN СтатистикаОбращений3.Дата AND (СтатистикаОбращений3.Дата + '6 day'::interval)
                                                            AND СтатистикаОбращений3.КодТипа = 3
                                                            AND СтатистикаОбращений3.КодТипаИсследования = ТипыИсследований.Код

        LEFT JOIN nn.СтатистикаОбращений СтатистикаОбращений4 ON ДатаПроекта BETWEEN СтатистикаОбращений4.Дата AND (СтатистикаОбращений4.Дата + '6 day'::interval)
                                                            AND СтатистикаОбращений4.КодТипа = 4
                                                            AND СтатистикаОбращений4.КодТипаИсследования = ТипыИсследований.Код
        WHERE ПроектыРасписания.Код = %s
        GROUP BY ДатаПроекта
        ORDER BY ДатаПроекта;

        """, [КодПроекта])



        def РаспределитьНаДень(ДоктораПоТипамИсследований, ИсследованияНаДеньМинМакс):

            ИсследованияНаДеньМинМакс = list(ИсследованияНаДеньМинМакс)

            ИсследованияДокторов = []

            ЗадействованныеДоктора = set()
            МаксимумДокторов = set()

            for ИндексТипа in range(len(ДоктораПоТипамИсследований)):
                for Доктор in ДоктораПоТипамИсследований[ИндексТипа]['Доктора']:
                    МаксимумДокторов.add(Доктор['Доктор']['Код'])

            class PriorityQueueElement:
                def __init__(self, w, data):
                    self.w = w
                    self.data = data

                def __lt__(self, other):
                    return self.w > other.w

            ПриоритетЗаполнения = queue.PriorityQueue()

            for it, (Количество, Тип) in enumerate(zip(ИсследованияНаДеньМинМакс, ТипыИсследований)):
                ПриоритетЗаполнения.put(PriorityQueueElement(Количество, Тип))

            while not ПриоритетЗаполнения.empty():

                element = ПриоритетЗаполнения.get()

                Количество, Тип = (element.w, element.data)

                ИндексТипа = Тип['Индекс']

                МинСдвиг = Тип['МинКолИсследованийЗаСмену']
                МаксСдвиг = Тип['МаксКолИсследованийЗаСмену']

                Доктора = ДоктораПоТипамИсследований[ИндексТипа]['Доктора']

                СвободныеДоктора = filter(lambda e: not e['Доктор']['Код'] in ЗадействованныеДоктора, Доктора)

                for Доктор in СвободныеДоктора:
                    ЧислоИсследований = int((МаксСдвиг) * decimal.Decimal(pd.Timedelta(Доктор['ТипРабочейСмены']['Продолжительность']).to_pytimedelta().total_seconds() / 60 / 60 / 8))

                    Количество -= ЧислоИсследований

                    ИсследованияДокторов.append({
                        'КодДоктора':Доктор['Доктор']['Код'],
                        'КодТипаРабочейСмены': Доктор['ТипРабочейСмены']['Код'],
                        'КодТипаИсследования': Тип['Код'],
                        'Количество': ЧислоИсследований,   
                    })

                    ЗадействованныеДоктора.add(Доктор['Доктор']['Код'])

                    if len(ЗадействованныеДоктора) < len(МаксимумДокторов) and Количество > 0:
                        ПриоритетЗаполнения.put(PriorityQueueElement(Количество, Тип))

                    break

                ИсследованияНаДеньМинМакс[ИндексТипа] = Количество

            return ИсследованияДокторов, ИсследованияНаДеньМинМакс


        sch_days = []

        for day in range(ЧислоДнейПроекта):

            ДоктораПоТипамИсследований = ДоктраПоДняПоТипамИсследований[day]['ДоктораПоТипамИсследований']

            ИсследованияНаДеньПланируемые = СтатистикаОбращенийПоДнямПроекта[day]['Значения']

            ИсследованияДокторов, ИсследованияНаДеньОстаток = РаспределитьНаДень(ДоктораПоТипамИсследований, ИсследованияНаДеньПланируемые)

            sch_days.append({
                'ИсследованияДокторов': ИсследованияДокторов,
                'ИсследованияНаДеньПланируемые': ИсследованияНаДеньПланируемые,
                'ИсследованияНаДеньОстаток': ИсследованияНаДеньОстаток,
            })

        sch_data = []

        for day in range(ЧислоДнейПроекта):
            date = ДатаНачала + datetime.timedelta(days=day)

            ИсследованияДокторов = sch_days[day]['ИсследованияДокторов']

            for it in range(len(ИсследованияДокторов)):

                sch_data.append({
                    'Дата': str(date),
                    'КодДоктора': ИсследованияДокторов[it]['КодДоктора'],
                    'КодТипаРабочейСмены': ИсследованияДокторов[it]['КодТипаРабочейСмены'],
                    'КодТипаИсследования': ИсследованияДокторов[it]['КодТипаИсследования'],
                    'Количество': ИсследованияДокторов[it]['Количество'],
                })

        ВерсияПроектаПодГенерацию = DbStore.execute_proc('sch.ПроектыРасписанияСоздатьВерсию', [КодПроекта, None])

        if len(sch_data) > 0:
            DbStore.execute_proc('sch.ЗаписиВерсииРасписанияСохранить', [ВерсияПроектаПодГенерацию[0]['Код'], json.dumps(sch_data)])

        Выполнено = True
        КодНовойВерсииПроектаРасписания = ВерсияПроектаПодГенерацию[0]['Код']

    except Exception as e:
        print(e)
        pass

    DbStore.execute_proc('sch.ЗапросыНаГенерациюРасписаниCommit', [Запрос[0]['Код'], Выполнено, КодНовойВерсииПроектаРасписания])
    return
